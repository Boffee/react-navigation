{"version":3,"sources":["GestureHandlerNative.tsx"],"names":["React","PanGestureHandler","PanGestureHandlerNative","GestureHandlerRefContext","props","gestureRef","useRef","simultaneousHandlers","setSimultaneousHandlers","useState","hitSlop","isModal","top","undefined","bottom","vertical","handler","GestureHandlerRootView","PanGestureHandlerGestureEvent","State","GestureState"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,iBAAiB,IAAIC,uBADvB,QAGO,8BAHP;AAIA,OAAOC,wBAAP,MAAqC,mCAArC;AAEA,OAAO,SAASF,iBAAT,CAA2BG,KAA3B,EAA+D;AACpE,QAAMC,UAAU,GAAGL,KAAK,CAACM,MAAN,CAAsC,IAAtC,CAAnB;AACA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDR,KAAK,CAACS,QAAN,EAAxD;AAIA,QAAMC,OAAY,GAAGN,KAAK,CAACM,OAA3B;AACA,QAAMC,OAAO,GACX,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,GAAT,MAAiBC,SAAjB,IACA,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,MAAT,MAAoBD,SADpB,IAEA,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,QAAT,MAAsBF,SAHxB;;AAKA,MAAIF,OAAJ,EAAa;AACX,wBACE,oBAAC,wBAAD,CAA0B,QAA1B;AACE,MAAA,KAAK,EAAE;AAAEK,QAAAA,OAAO,EAAEX,UAAX;AAAuBG,QAAAA;AAAvB;AADT,oBAGE,oBAAC,uBAAD,eACMJ,KADN;AAEE,MAAA,GAAG,EAAEC,UAFP;AAGE,MAAA,oBAAoB,EAAEE;AAHxB,OAHF,CADF;AAWD,GAZD,MAYO;AACL,wBACE,oBAAC,uBAAD,eACMH,KADN;AAEE,MAAA,GAAG,EAAEC,UAFP;AAGE,MAAA,oBAAoB,EAAEE;AAHxB,OADF;AAOD;AACF;AAED,SACEU,sBADF,EAEEC,6BAFF,EAGEC,KAAK,IAAIC,YAHX,QAIO,8BAJP","sourcesContent":["import * as React from 'react';\nimport {\n  PanGestureHandler as PanGestureHandlerNative,\n  PanGestureHandlerProperties,\n} from 'react-native-gesture-handler';\nimport GestureHandlerRefContext from '../utils/GestureHandlerRefContext';\n\nexport function PanGestureHandler(props: PanGestureHandlerProperties) {\n  const gestureRef = React.useRef<PanGestureHandlerNative>(null);\n  const [simultaneousHandlers, setSimultaneousHandlers] = React.useState<\n    React.Ref<any> | React.Ref<any>[]\n  >();\n\n  const hitSlop: any = props.hitSlop;\n  const isModal =\n    hitSlop?.top !== undefined ||\n    hitSlop?.bottom !== undefined ||\n    hitSlop?.vertical !== undefined;\n\n  if (isModal) {\n    return (\n      <GestureHandlerRefContext.Provider\n        value={{ handler: gestureRef, setSimultaneousHandlers }}\n      >\n        <PanGestureHandlerNative\n          {...props}\n          ref={gestureRef}\n          simultaneousHandlers={simultaneousHandlers}\n        />\n      </GestureHandlerRefContext.Provider>\n    );\n  } else {\n    return (\n      <PanGestureHandlerNative\n        {...props}\n        ref={gestureRef}\n        simultaneousHandlers={simultaneousHandlers}\n      />\n    );\n  }\n}\n\nexport {\n  GestureHandlerRootView,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\n"]}