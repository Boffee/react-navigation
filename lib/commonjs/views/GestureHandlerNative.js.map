{"version":3,"sources":["GestureHandlerNative.tsx"],"names":["PanGestureHandler","props","gestureRef","React","useRef","simultaneousHandlers","setSimultaneousHandlers","useState","hitSlop","isModal","top","undefined","bottom","vertical","handler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAIA;;;;;;;;;;AAEO,SAASA,iBAAT,CAA2BC,KAA3B,EAA+D;AACpE,QAAMC,UAAU,GAAGC,KAAK,CAACC,MAAN,CAAsC,IAAtC,CAAnB;AACA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDH,KAAK,CAACI,QAAN,EAAxD;AAIA,QAAMC,OAAY,GAAGP,KAAK,CAACO,OAA3B;AACA,QAAMC,OAAO,GACX,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,GAAT,MAAiBC,SAAjB,IACA,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,MAAT,MAAoBD,SADpB,IAEA,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,QAAT,MAAsBF,SAHxB;;AAKA,MAAIF,OAAJ,EAAa;AACX,wBACE,oBAAC,iCAAD,CAA0B,QAA1B;AACE,MAAA,KAAK,EAAE;AAAEK,QAAAA,OAAO,EAAEZ,UAAX;AAAuBI,QAAAA;AAAvB;AADT,oBAGE,oBAAC,4CAAD,eACML,KADN;AAEE,MAAA,GAAG,EAAEC,UAFP;AAGE,MAAA,oBAAoB,EAAEG;AAHxB,OAHF,CADF;AAWD,GAZD,MAYO;AACL,wBACE,oBAAC,4CAAD,eACMJ,KADN;AAEE,MAAA,GAAG,EAAEC,UAFP;AAGE,MAAA,oBAAoB,EAAEG;AAHxB,OADF;AAOD;AACF","sourcesContent":["import * as React from 'react';\nimport {\n  PanGestureHandler as PanGestureHandlerNative,\n  PanGestureHandlerProperties,\n} from 'react-native-gesture-handler';\nimport GestureHandlerRefContext from '../utils/GestureHandlerRefContext';\n\nexport function PanGestureHandler(props: PanGestureHandlerProperties) {\n  const gestureRef = React.useRef<PanGestureHandlerNative>(null);\n  const [simultaneousHandlers, setSimultaneousHandlers] = React.useState<\n    React.Ref<any> | React.Ref<any>[]\n  >();\n\n  const hitSlop: any = props.hitSlop;\n  const isModal =\n    hitSlop?.top !== undefined ||\n    hitSlop?.bottom !== undefined ||\n    hitSlop?.vertical !== undefined;\n\n  if (isModal) {\n    return (\n      <GestureHandlerRefContext.Provider\n        value={{ handler: gestureRef, setSimultaneousHandlers }}\n      >\n        <PanGestureHandlerNative\n          {...props}\n          ref={gestureRef}\n          simultaneousHandlers={simultaneousHandlers}\n        />\n      </GestureHandlerRefContext.Provider>\n    );\n  } else {\n    return (\n      <PanGestureHandlerNative\n        {...props}\n        ref={gestureRef}\n        simultaneousHandlers={simultaneousHandlers}\n      />\n    );\n  }\n}\n\nexport {\n  GestureHandlerRootView,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\n"]}